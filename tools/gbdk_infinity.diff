diff -ru SDK.orig/gbz80-gb/2-1-5/lib/crt0.s SDK/gbz80-gb/2-1-5/lib/crt0.s
--- SDK.orig/gbz80-gb/2-1-5/lib/crt0.s	1999-10-17 22:02:46.000000000 -0700
+++ SDK/gbz80-gb/2-1-5/lib/crt0.s	2016-07-25 14:14:31.603316904 -0700
@@ -10,66 +10,99 @@
 	.org	0x00
 	RET			; Empty function (default for interrupts)
 
-	.org	0x10
-	.byte	0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
-	.byte	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
+   .org  0x08
+vram_copy:
+   LD    (HL), A
+   CP    (HL)
+   JR    NZ, vram_copy
+   INC   HL
+   RET
+
+   .org  0x10
+   .byte 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
+   .byte 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
+
+   .org  0x20
+   CP    #0xFF
+   JR    NZ, vram_copy
+   PUSH  BC
+   LD    B, #0x40
+vw_loop:
+   LD    (HL), A
+   DEC   B
+   LD    (HL), A
+   JR    NZ, vw_loop
+   POP   BC
+   INC   HL
+   RET
+
+.globl _vblank_int
 
 	;; Interrupt vectors
 	.org	0x40		; VBL
 .int_VBL:
-	PUSH	HL
-	LD	HL,#.int_0x40
-	JP	.int
+   JP    _vblank_int
+
+;   PUSH  HL
+;   LD HL,#.int_0x40
+;   JP .int
+
+.globl _hblank_int
 
 	.org	0x48		; LCD
 .int_LCD:
-	PUSH	HL
-	LD	HL,#.int_0x48
-	JP	.int
+   JP    _hblank_int
 
-	.org	0x50		; TIM
+;   PUSH  HL
+;   LD HL,#.int_0x48
+;   JP .int
+
+   .org  0x50     ; TIM
 .int_TIM:
-	PUSH	HL
-	LD	HL,#.int_0x50
-	JP	.int
+   RETI
+;   PUSH  HL
+;   LD HL,#.int_0x50
+;   JP .int
 
 	.org	0x58		; SIO
 .int_SIO:
-	PUSH	HL
-	LD	HL,#.int_0x58
-	JP	.int
+   RETI
+;   PUSH  HL
+;   LD HL,#.int_0x58
+;   JP .int
 
 	.org	0x60		; JOY
 .int_JOY:
-	PUSH	HL
-	LD	HL,#.int_0x60
-	JP	.int
+   RETI
+;   PUSH  HL
+;   LD HL,#.int_0x60
+;   JP .int
 
 .int:
-	PUSH	AF
-	PUSH	BC
-	PUSH	DE
-1$:
-	LD	A,(HL+)
-	OR	(HL)
-	JR	Z,2$
-	PUSH	HL
-	LD	A,(HL-)
-	LD	L,(HL)
-	LD	H,A
-	CALL	3$
-	POP	HL
-	INC	HL
-	JR	1$
-2$:
-	POP	DE
-	POP	BC
-	POP	AF
-	POP	HL
-	RETI
-
-3$:
-	JP	(HL)
+;   PUSH  AF
+;   PUSH  BC
+;   PUSH  DE
+;1$:
+;   LD A,(HL+)
+;   OR (HL)
+;   JR Z,2$
+;   PUSH  HL
+;   LD A,(HL-)
+;   LD L,(HL)
+;   LD H,A
+;   CALL  3$
+;   POP   HL
+;   INC   HL
+;   JR 1$
+;2$:
+;   POP   DE
+;   POP   BC
+;   POP   AF
+;   POP   HL
+;   RETI
+;
+;3$:
+;   JP (HL)
 
 	;; GameBoy Header
 
@@ -128,41 +161,44 @@
 
 	;; ****************************************
 	.org	0x150
-.code_start:
-	;; Beginning of the code
-	DI			; Disable interrupts
-	LD	D,A		; Store CPU type in D
+
+.globl _STIR_B
+
+.code_start:                           ;; Beginning of code
+   DI                                  ; Disable interrupts
+
+   LD    D, A                          ; Store unit type in DE
+   LD    E, B                          ;
+
 	XOR	A
+
 	;; Initialize the stack
-	LD	SP,#.STACK
+;   LD    SP, #.STACK
+   LD    SP, #0xD000
+
 	;; Clear from 0xC000 to 0xDFFF
-	LD	HL,#0xDFFF
-	LD	C,#0x20
-	LD	B,#0x00
+   LD    HL, #0xC000
+   LD    BC, #0x0020
 1$:
-	LD	(HL-),A
-	DEC	B
-	JR	NZ,1$
-	DEC	C
-	JR	NZ,1$
+   LD    (HLI), A
+   DEC   B
+   JR    NZ, 1$
+   DEC   C
+   JR    NZ, 1$
+
 	;; Clear from 0xFE00 to 0xFEFF
-	LD	HL,#0xFEFF
-	LD	B,#0x00
-2$:
-	LD	(HL-),A
-	DEC	B
-	JR	NZ,2$
+   LD    H,#0xFE     ; HL = FE00, B = 0
+   CALL  _STIR_B
+
 	;; Clear from 0xFF80 to 0xFFFF
-	LD	HL,#0xFFFF
-	LD	B,#0x80
-3$:
-	LD	(HL-),A
-	DEC	B
-	JR	NZ,3$
-; 	LD	(.mode),A	; Clearing (.mode) is performed when clearing RAM
-	;; Store CPU type
-	LD	A,D
-	LD	(__cpu),A
+   LD    HL, #0xFF80
+   LD    B, #0x80
+   CALL  _STIR_B
+
+   LD    HL, #__cpu
+   LD    A, D                          ;; Store unit type
+   LD    (HLI), A
+   LD    (HL), E
 
 	;; Turn the screen off
 	CALL	.display_off
@@ -173,25 +209,25 @@
 	LDH	(.SCX),A
 	LDH	(.STAT),A
 	LDH	(.WY),A
-	LD	A,#0x07
+   LD    A, #0x07
 	LDH	(.WX),A
 
-	;; Copy refresh_OAM routine to HIRAM
-	LD	BC,#.refresh_OAM
-	LD	HL,#.start_refresh_OAM
-	LD	B,#.end_refresh_OAM-.start_refresh_OAM
+   ;; Copy refresh_OAM routine to HIRAM
+   LD BC,#.refresh_OAM
+   LD HL,#.start_refresh_OAM
+   LD B,#.end_refresh_OAM-.start_refresh_OAM
 4$:
-	LD	A,(HL+)
-	LDH	(C),A
-	INC	C
-	DEC	B
-	JR	NZ,4$
-
-	;; Install interrupt routines
-	LD	BC,#.vbl
-	CALL	.add_VBL
-	LD	BC,#.serial_IO
-	CALL	.add_SIO
+   LD A,(HL+)
+   LDH   (C),A
+   INC   C
+   DEC   B
+   JR NZ,4$
+
+;   ;; Install interrupt routines
+;   LD BC,#.vbl
+;   CALL  .add_VBL
+;   LD BC,#.serial_IO
+;   CALL  .add_SIO
 
 	;; Standard color palettes
 	LD	A,#0b11100100	; Grey 3 = 11 (Black)
@@ -246,9 +282,20 @@
 99$:
 	JR	99$		; Wait forever
 
-	.org	.MODE_TABLE
-	;; Jump table for modes
-	RET
+   ;; Copy OAM data to OAM RAM
+.start_refresh_OAM:
+   LD A,#>.OAM
+   LDH   (.DMA),A ; Put A into DMA registers
+   LD A,#0x28     ; We need to wait 160 ns
+1$:
+   DEC   A
+   JR NZ,1$
+   RET
+.end_refresh_OAM:
+
+;   .org  .MODE_TABLE
+;   ;; Jump table for modes
+;   RET
 
 	;; ****************************************
 
@@ -263,6 +310,8 @@
 
 __cpu::
 	.ds	0x01		; GB type (GB, PGB, CGB)
+__gba::
+   .ds   0x01     ; GBA?
 .mode::
 	.ds	0x01		; Current mode
 __io_out::
@@ -292,124 +341,124 @@
 
 	;; Call the initialization function for the mode specified in HL
 .set_mode::
-	LD	A,L
-	LD	(.mode),A
+;   LD A,L
+;   LD (.mode),A
+;
+;   ;; AND to get rid of the extra flags
+;   AND   #0x03
+;   LD L,A
+;   LD BC,#.MODE_TABLE
+;   SLA   L     ; Multiply mode by 4
+;   SLA   L
+;   ADD   HL,BC
+;   JP (HL)     ; Jump to initialization routine
 
-	;; AND to get rid of the extra flags
-	AND	#0x03
-	LD	L,A
-	LD	BC,#.MODE_TABLE
-	SLA	L		; Multiply mode by 4
-	SLA	L
-	ADD	HL,BC
-	JP	(HL)		; Jump to initialization routine
-
-	;; Add interrupt routine in BC to the interrupt list
+;   ;; Add interrupt routine in BC to the interrupt list
 .add_VBL::
-	LD	HL,#.int_0x40
-	JP	.add_int
+;   LD HL,#.int_0x40
+;   JP .add_int
 .add_LCD::
-	LD	HL,#.int_0x48
-	JP	.add_int
+;   LD HL,#.int_0x48
+;   JP .add_int
 .add_TIM::
-	LD	HL,#.int_0x50
-	JP	.add_int
+;   LD HL,#.int_0x50
+;   JP .add_int
 .add_SIO::
-	LD	HL,#.int_0x58
-	JP	.add_int
+;   LD HL,#.int_0x58
+;   JP .add_int
 .add_JOY::
-	LD	HL,#.int_0x60
-	JP	.add_int
+;   LD HL,#.int_0x60
+;   JP .add_int
 
-	;; Remove interrupt BC from interrupt list HL if it exists
-	;; Abort if a 0000 is found (end of list)
-	;; Will only remove last int on list
+;   ;; Remove interrupt BC from interrupt list HL if it exists
+;   ;; Abort if a 0000 is found (end of list)
+;   ;; Will only remove last int on list
 .remove_int::
-1$:
-	LD	A,(HL+)
-	LD	E,A
-	LD	D,(HL)
-	OR	D
-	RET	Z		; No interrupt found
-
-	LD	A,E
-	CP	C
-	JR	NZ,1$
-	LD	A,D
-	CP	B
-	JR	NZ,1$
-
-	XOR	A
-	LD	(HL-),A
-	LD	(HL),A
-	INC	A		; Clear Z flag
-	RET
+;1$:
+;   LD A,(HL+)
+;   LD E,A
+;   LD D,(HL)
+;   OR D
+;   RET   Z     ; No interrupt found
+;
+;   LD A,E
+;   CP C
+;   JR NZ,1$
+;   LD A,D
+;   CP B
+;   JR NZ,1$
+;
+;   XOR   A
+;   LD (HL-),A
+;   LD (HL),A
+;   INC   A     ; Clear Z flag
+;   RET
 	
-	;; Add interrupt routine in BC to the interrupt list in HL
+;   ;; Add interrupt routine in BC to the interrupt list in HL
 .add_int::
-1$:
-	LD	A,(HL+)
-	OR	(HL)
-	JR	Z,2$
-	INC	HL
-	JR	1$
-2$:
-	LD	(HL),B
-	DEC	HL
-	LD	(HL),C
-	RET
+;1$:
+;   LD A,(HL+)
+;   OR (HL)
+;   JR Z,2$
+;   INC   HL
+;   JR 1$
+;2$:
+;   LD (HL),B
+;   DEC   HL
+;   LD (HL),C
+;   RET
 
 	
-	;; VBlank interrupt
-.vbl:
-	LD	HL,#.sys_time
-	INC	(HL)
-	JR	NZ,2$
-	INC	HL
-	INC	(HL)
-2$:	
-	CALL	.refresh_OAM
-
-	.if	0
-	;; Verify that only one VBlank interrupt occured
-	LD	A,(.vbl_done)
-	OR	A
-	JR	Z,1$
-	LDH	A,(.BGP)
-	CPL
-	LDH	(.BGP),A
-1$:
-	.endif
-
-	LD	A,#0x01
-	LD	(.vbl_done),A
-	RET
+;   ;; VBlank interrupt
+;.vbl:
+;   LD HL,#.sys_time
+;   INC   (HL)
+;   JR NZ,2$
+;   INC   HL
+;   INC   (HL)
+;2$: 
+;   CALL  .refresh_OAM
+;
+;   .if   0
+;   ;; Verify that only one VBlank interrupt occured
+;   LD A,(.vbl_done)
+;   OR A
+;   JR Z,1$
+;   LDH   A,(.BGP)
+;   CPL
+;   LDH   (.BGP),A
+;1$:
+;   .endif
+;
+;   LD A,#0x01
+;   LD (.vbl_done),A
+;   RET
 
-	;; Wait for VBL interrupt to be finished
+;   ;; Wait for VBL interrupt to be finished
 .wait_vbl_done::
 _wait_vbl_done::
-	;; Check if the screen is on
-	LDH	A,(.LCDC)
-	ADD	A
-	RET	NC		; Return if screen is off
-1$:
-	HALT			; Wait for any interrupt
-	NOP			; HALT sometimes skips the next instruction
-	LD	A,(.vbl_done)	; Was it a VBlank interrupt?
-	;; Warning: we may lose a VBlank interrupt, if it occurs now
-	OR	A
-	JR	Z,1$		; No: back to sleep!
-
-	XOR	A
-	LD	(.vbl_done),A
-	RET
+;   ;; Check if the screen is on
+;   LDH   A,(.LCDC)
+;   ADD   A
+;   RET   NC    ; Return if screen is off
+;1$:
+;   HALT        ; Wait for any interrupt
+;   NOP         ; HALT sometimes skips the next instruction
+;   LD A,(.vbl_done)  ; Was it a VBlank interrupt?
+;   ;; Warning: we may lose a VBlank interrupt, if it occurs now
+;   OR A
+;   JR Z,1$     ; No: back to sleep!
+;
+;   XOR   A
+;   LD (.vbl_done),A
+;   RET
 
 .display_off::
 _display_off::
-	;; Check if the screen is on
-	LDH	A,(.LCDC)
-	ADD	A
-	RET	NC		; Return if screen is off
+   ;; Check if the screen is on
+   LDH   A,(.LCDC)
+   ADD   A
+   RET   NC    ; Return if screen is off
 1$:				; We wait for the *NEXT* VBL 
 	LDH	A,(.LY)
 	CP	#0x92		; Smaller than or equal to 0x91?
@@ -424,66 +473,55 @@
 	LDH	(.LCDC),A	; Turn off screen
 	RET
 
-	;; Copy OAM data to OAM RAM
-.start_refresh_OAM:
-	LD	A,#>.OAM
-	LDH	(.DMA),A	; Put A into DMA registers
-	LD	A,#0x28		; We need to wait 160 ns
-1$:
-	DEC	A
-	JR	NZ,1$
-	RET
-.end_refresh_OAM:
-
-	;; Serial interrupt
+;   ;; Serial interrupt
 .serial_IO::
-	LD	A,(__io_status) ; Get status
-
-	CP	#.IO_RECEIVING
-	JR	NZ,10$
-
-	;; Receiving data
-	LDH	A,(.SB)		; Get data byte
-	LD	(__io_in),A	; Store it
-	LD	A,#.IO_IDLE
-	JR	11$
-
-10$:
-
-	CP	#.IO_SENDING
-	JR	NZ,99$
-
-	;; Sending data
-	LDH	A,(.SB)		; Get data byte
-	CP	#.DT_RECEIVING
-	JR	Z,11$
-	LD	A,#.IO_ERROR
-	JR	12$
-11$:
-	LD	A,#.IO_IDLE
-12$:
-	LD	(__io_status),A ; Store status
-
-	XOR	A
-	LDH	(.SC),A		; Use external clock
-	LD	A,#.DT_IDLE
-	LDH	(.SB),A		; Reply with IDLE byte
-99$:
-	LD	A,#0x80
-	LDH	(.SC),A		; Enable transfer with external clock
-	RET
+;   LD A,(__io_status) ; Get status
+;
+;   CP #.IO_RECEIVING
+;   JR NZ,10$
+;
+;   ;; Receiving data
+;   LDH   A,(.SB)     ; Get data byte
+;   LD (__io_in),A ; Store it
+;   LD A,#.IO_IDLE
+;   JR 11$
+;
+;10$:
+;
+;   CP #.IO_SENDING
+;   JR NZ,99$
+;
+;   ;; Sending data
+;   LDH   A,(.SB)     ; Get data byte
+;   CP #.DT_RECEIVING
+;   JR Z,11$
+;   LD A,#.IO_ERROR
+;   JR 12$
+;11$:
+;   LD A,#.IO_IDLE
+;12$:
+;   LD (__io_status),A ; Store status
+;
+;   XOR   A
+;   LDH   (.SC),A     ; Use external clock
+;   LD A,#.DT_IDLE
+;   LDH   (.SB),A     ; Reply with IDLE byte
+;99$:
+;   LD A,#0x80
+;   LDH   (.SC),A     ; Enable transfer with external clock
+;   RET
 
 _mode::
-	LDA	HL,2(SP)	; Skip return address
-	LD	L,(HL)
-	LD	H,#0x00
-	CALL	.set_mode
-	RET
+;   LDA   HL,2(SP) ; Skip return address
+;   LD L,(HL)
+;   LD H,#0x00
+;   CALL  .set_mode
+;   RET
 
 _get_mode::
-	LD	HL,#.mode
-	LD	E,(HL)
-	RET
+;   LD HL,#.mode
+;   LD E,(HL)
+;   RET
 	
 _enable_interrupts::
 	EI
@@ -495,68 +533,68 @@
 
 .reset::
 _reset::
-	LD	A,(__cpu)
-	JP	.code_start
+;   LD    A, (__cpu)
+;   JP    .code_start
 
 _set_interrupts::
-	DI
-	LDA	HL,2(SP)	; Skip return address
-	XOR	A
-	LDH	(.IF),A		; Clear pending interrupts
-	LD	A,(HL)
-	LDH	(.IE),A
-	EI			; Enable interrupts
-	RET
+   DI
+   LDA   HL,2(SP)    ; Skip return address
+   XOR   A
+   LDH   (.IF),A     ; Clear pending interrupts
+   LD    A,(HL)
+   LDH   (.IE),A
+   EI                ; Enable interrupts
+   RET
 
 _add_VBL::
-	PUSH	BC
-	LDA	HL,4(SP)	; Skip return address and registers
-	LD	C,(HL)
-	INC	HL
-	LD	B,(HL)
-	CALL	.add_VBL
-	POP	BC
-	RET
+;   PUSH  BC
+;   LDA   HL,4(SP) ; Skip return address and registers
+;   LD C,(HL)
+;   INC   HL
+;   LD B,(HL)
+;   CALL  .add_VBL
+;   POP   BC
+;   RET
 
 _add_LCD::
-	PUSH	BC
-	LDA	HL,4(SP)	; Skip return address and registers
-	LD	C,(HL)
-	INC	HL
-	LD	B,(HL)
-	CALL	.add_LCD
-	POP	BC
-	RET
+;   PUSH  BC
+;   LDA   HL,4(SP) ; Skip return address and registers
+;   LD C,(HL)
+;   INC   HL
+;   LD B,(HL)
+;   CALL  .add_LCD
+;   POP   BC
+;   RET
 
 _add_TIM::
-	PUSH	BC
-	LDA	HL,4(SP)	; Skip return address and registers
-	LD	C,(HL)
-	INC	HL
-	LD	B,(HL)
-	CALL	.add_TIM
-	POP	BC
-	RET
+;   PUSH  BC
+;   LDA   HL,4(SP) ; Skip return address and registers
+;   LD C,(HL)
+;   INC   HL
+;   LD B,(HL)
+;   CALL  .add_TIM
+;   POP   BC
+;   RET
 
 _add_SIO::
-	PUSH	BC
-	LDA	HL,4(SP)	; Skip return address and registers
-	LD	C,(HL)
-	INC	HL
-	LD	B,(HL)
-	CALL	.add_SIO
-	POP	BC
-	RET
+;   PUSH  BC
+;   LDA   HL,4(SP) ; Skip return address and registers
+;   LD C,(HL)
+;   INC   HL
+;   LD B,(HL)
+;   CALL  .add_SIO
+;   POP   BC
+;   RET
 
 _add_JOY::
-	PUSH	BC
-	LDA	HL,4(SP)	; Skip return address and registers
-	LD	C,(HL)
-	INC	HL
-	LD	B,(HL)
-	CALL	.add_JOY
-	POP	BC
-	RET
+;   PUSH  BC
+;   LDA   HL,4(SP) ; Skip return address and registers
+;   LD C,(HL)
+;   INC   HL
+;   LD B,(HL)
+;   CALL  .add_JOY
+;   POP   BC
+;   RET
 
 	.area	_HEAP
 _malloc_heap_start::
diff -ru SDK.orig/gbz80-gb/2-1-5/lib/mul.s SDK/gbz80-gb/2-1-5/lib/mul.s
--- SDK.orig/gbz80-gb/2-1-5/lib/mul.s	1999-10-17 22:02:49.000000000 -0700
+++ SDK/gbz80-gb/2-1-5/lib/mul.s	2016-07-25 14:14:31.775316898 -0700
@@ -1,13 +1,7 @@
-	.include	"global.s"
+   .include "global.s"
 
 	.area	_CODE
 
-.mul8::
-.mulu8::
-	LD	B,#0x00		; Sign extend is not necessary with mul
-	LD	D,B
-	; Fall through
-	
 	;; 16-bit multiplication
 	;; 
 	;; Entry conditions
@@ -18,27 +12,278 @@
 	;;   DE = less significant word of product
 	;;
 	;; Register used: AF,BC,DE,HL
+
+.mul8::
+.mulu8::
+;   LD    B, #0x00                      ; Sign extend is not necessary with mul
+;   LD    D, B
+
+; Table must be page aligned.
+; .db (-256*-256)/4,(-255)*(-255)/4,...,(-1*-1)/4, then msb's
+; .db 0*0/4,1*1/4,...,255*255/4,                   then msb's
+; .db 256*256/4,257*257/4,...,511*511/4            then msb's
+; .db 0*0/4,1*1/4,...,255*255/4,                   then msb's
+
+;input:
+; C,E=multiplicands
+;output:
+; DE=product
+;mul8:
+
+;   LDH   A, (0xF0)
+;   PUSH  AF
+;   LD    A, #0x0E
+;   LDH   (0xF0), A
+;   LD    (0x2000), A
+;
+;   LD    A, C
+;   SUB   E
+;   LD    L, A
+;   SBC   A, A
+;   SBC   A, #256-0x42
+;   LD    H, A
+;
+;   LD    A, C
+;   ADD   A, E
+;   LD    C, A
+;   SBC   A, A
+;   SBC   A, #256-0x46
+;   LD    B, A
+;
+;   LD    A, (BC)
+;   SUB   (HL)
+;   LD    E, A
+;   INC   B
+;   INC   H
+;   LD    A, (BC)
+;   SBC   A, (HL)
+;   LD    D, A
+;
+;   POP   AF
+;   LDH   (0xF0), A
+;   LD    (0x2000), A
+;
+;   RET
+
 .mul16::
 .mulu16::
-	LD	HL,#0x00	; Product = 0
-	LD	A,#15		; Count = bit length - 1
-	;; Shift-and-add algorithm
-	;; If MSB of multiplier is 1, add multiplicand to partial product
-	;; Shift partial product, multiplier left 1 bit
-.mlp:
-	SLA	E		; Shift multiplier left 1 bit
-	RL	D
-	JR	NC,.mlp1	; Jump if MSB of multiplier = 0
-	ADD	HL,BC		; Add multiplicand to partial product
-.mlp1:
-	ADD	HL,HL		; Shift partial product left
-	DEC	A
-	JR	NZ,.mlp		; Continue until count = 0
-	;; Add multiplicand one last time if MSB of multiplier is 1
-	BIT	7,D		; Get MSB of multiplier
-	JR	Z,.mend		; Exit if MSB of multiplier is 0
-	ADD	HL,BC		; Add multiplicand to product
-.mend:
-	LD	D,H		; DE = result
-	LD	E,L
-	RET
+   LDH   A, (0xF0)
+   PUSH  AF
+   LD    A, #0x0E
+   LDH   (0xF0), A
+   LD    (0x2000), A
+
+   LD    A, C                  ; C*E
+   SUB   E
+   LD    L, A
+   SBC   A, A
+   SBC   A, #256-0x42
+   LD    H, A
+
+   LD    A, C
+   LD    C, E
+   PUSH  BC
+   LD    E, A
+   PUSH  DE
+   ADD   A, C
+   LD    C, A
+   SBC   A, A
+   SBC   A, #256-0x46
+   LD    B, A
+
+   LD    A, (BC)
+   SUB   (HL)
+   LD    E, A
+   INC   B
+   INC   H
+   LD    A, (BC)
+   SBC   A, (HL)
+   LD    B, D
+   LD    D, A
+
+   POP   BC
+
+   LD    A, C                  ; C*D
+   SUB   B
+   LD    L, A
+   SBC   A, A
+   SBC   A, #256-0x42
+   LD    H, A
+
+   LD    A, C
+   ADD   A, B
+   LD    C, A
+   SBC   A, A
+   SBC   A, #256-0x46
+   LD    B, A
+
+   LD    A, (BC)
+   SUB   (HL)
+   ADD   A, D
+   LD    D, A
+
+   POP   BC
+
+   LD    A, B                  ; B*E
+   SUB   C
+   LD    L, A
+   SBC   A, A
+   SBC   A, #256-0x42
+   LD    H, A
+
+   LD    A, B
+   ADD   A, C
+   LD    C, A
+   SBC   A, A
+   SBC   A, #256-0x46
+   LD    B, A
+
+   LD    A, (BC)
+   SUB   (HL)
+   ADD   A, D
+   LD    D, A
+
+   LD    BC, #0x20F0
+   POP   AF
+   LDH   (C), A
+   LD    (BC), A
+
+   RET
+
+;   LD HL,#0x00 ; Product = 0
+;   LD A,#15    ; Count = bit length - 1
+;   ;; Shift-and-add algorithm
+;   ;; If MSB of multiplier is 1, add multiplicand to partial product
+;   ;; Shift partial product, multiplier left 1 bit
+;.mlp:
+;   SLA   E     ; Shift multiplier left 1 bit
+;   RL D
+;   JR NC,.mlp1 ; Jump if MSB of multiplier = 0
+;   ADD   HL,BC    ; Add multiplicand to partial product
+;.mlp1:
+;   ADD   HL,HL    ; Shift partial product left
+;   DEC   A
+;   JR NZ,.mlp     ; Continue until count = 0
+;   ;; Add multiplicand one last time if MSB of multiplier is 1
+;   BIT   7,D      ; Get MSB of multiplier
+;   JR Z,.mend     ; Exit if MSB of multiplier is 0
+;   ADD   HL,BC    ; Add multiplicand to product
+;.mend:
+;   LD D,H      ; DE = result
+;   LD E,L
+;   RET
+
+;;----------------------------------------------------------------------------
+;;[ MUL_DE_S ] by Hideaki Omuro
+;; optimized for time (87 bytes, 104-120 clocks)
+;;
+;;parameters:
+;; BC = 16-bit multiplicand, DE = 16-bit multiplier
+;;returns:
+;; DE = 16-bit product
+;;----------------------------------------------------------------------------
+;MUL_DE_S:
+;   LD    A, D                          ; AC=multiplicand
+;   LD    HL, 0                         ; result=0
+;
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_1             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_1:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_2             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_2:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_3             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_3:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_4             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_4:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_5             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_5:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_6             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_6:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_7             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_7:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip1_8             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip1_8:
+;
+;   LD    A, E                          ;
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_1             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_1:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_2             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_2:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_3             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_3:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_4             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_4:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_5             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_5:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_6             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_6:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_7             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_7:
+;
+;   ADD   HL, HL                        ; 16-bit shift
+;   ADD   A, A                          ; test bit
+;   JR    NC, _CMDE_skip2_8             ; if shifted bit is set then
+;   ADD   HL, BC                        ; add the multiplier
+;_CMDE_skip2_8:
+;
+;   LD    D, H
+;   LD    E, L
+;
+;   RET
