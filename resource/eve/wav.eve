; Copyright (C) 1999-2001 Affinix Software, LLC
;
; This file is part of Infinity.
;
; This file may be used under the terms of the Creative Commons Attribution-
; NonCommercial-ShareAlike 4.0 International License as published by Creative
; Commons.
;
; In addition, as a special exception, Affinix Software gives you certain
; additional rights. These rights are described in the LICENSE file in this
; package.

O_WAV:
   fadeout(X_ROLL)

   put(0,VAR_WAVHIT)
   put(0,VAR_WAVWATER1)
   put(0,VAR_WAVWATER2)

   face(0,UP)
   set(D,$04)
   set(E,$0a)
   set(G,X_ROLL)
   song(SNG_MYSTERY)
   goto(wav_part1_nf)

wav_part1:
   fadeout(X_FADE)
   set(G,X_FADE)
wav_part1_nf:
   lmap(MAP_WAV_P1, D,E)
   zone(ZONE_WAV)
   cstep(wav_part1a, $04,$0b)
   cstep(wav_part1b, $04,$05)
   fadein(G)
   end
wav_part1a:
   set(B,88)
   set(C,99)
   goto(OVER_WARP)
wav_part1b:
   set(D,$12)
   set(E,$14)
   goto(wav_part2)

wav_part2:
   fadeout(X_FADE)
   lmap(MAP_WAV_P2, D,E)
   zone(ZONE_WAV)
   cstep(wav_part2a, $12,$14)
   cstep(wav_part2b, $14,$03)
   ctres($67,IT_HPLo,$0d,$07,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part2a:
   set(D,$04)
   set(E,$05)
   goto(wav_part1)
wav_part2b:
   set(D,$0e)
   set(E,$1e)
   goto(wav_part3)

wav_part3:
   fadeout(X_FADE)
   lmap(MAP_WAV_P3, D,E)
   zone(ZONE_WAV)
   cstep(wav_part3a, $0e,$1f)
   cstep(wav_part3b, $08,$01)
   cstep(wav_part3c, $14,$01)
   cstep(wav_part3d, $1a,$14)
   ctres($68,IT_HPLo,$03,$13,$31,SFX_CHEST)
   ctres($69,IT_HPLo,$19,$13,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part3a:
   set(D,$14)
   set(E,$03)
   goto(wav_part2)
wav_part3b:
   set(D,$08)
   set(E,$1e)
   goto(wav_part5)
wav_part3c:
   set(D,$08)
   set(E,$1e)
   goto(wav_part6)
wav_part3d:
   set(D,$01)
   set(E,$08)
   goto(wav_part4)

wav_part4:
   fadeout(X_FADE)
   lmap(MAP_WAV_P4, D,E)
   zone(ZONE_WAV)
   cstep(wav_part4a, $00,$08)
   ctres($6a,IT_HPLo,$06,$06,$31,SFX_CHEST)
   ctres($6b,IT_HPLo,$08,$06,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part4a:
   set(D,$19)
   set(E,$14)
   goto(wav_part3)

wav_part5:
   fadeout(X_FADE)
   lmap(MAP_WAV_P5, D,E)
   zone(ZONE_WAV)
   cstep(wav_part5a, $08,$1f)
   ctres($6c,IT_HPLo,$0f,$06,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part5a:
   set(D,$08)
   set(E,$01)
   goto(wav_part3)

wav_part6:
   fadeout(X_FADE)
   lmap(MAP_WAV_P6, D,E)
   zone(ZONE_WAV)
   cstep(wav_part6a, $08,$1f)
   cstep(wav_part6b, $08,$0c)
   ctres($6d,IT_HPLo,$01,$06,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part6a:
   set(D,$14)
   set(E,$01)
   goto(wav_part3)
wav_part6b:
   set(D,$0c)
   set(E,$07)
   goto(wav_part7)

wav_part7:
   fadeout(X_FADE)
   lmap(MAP_WAV_P7, D,E)
   zone(ZONE_WAV)
   hitstate(2)
   call(wav_check)

   cstep(wav_part7a, $0c,$07)
   cstep(wav_part7b, $10,$03)
   chstep(wav_hithi, $0f,$0f,1)
   chstep(wav_hitlo, $0f,$10,1)
   csearch(wav_switch1, $03,$10,S_ALL)
   csearch(wav_switch2, $18,$08,S_ALL)

   ctres($6e,IT_HPLo,$0b,$15,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part7a:
   set(D,$08)
   set(E,$0c)
   goto(wav_part6)
wav_part7b:
   set(D,$06)
   set(E,$0d)
   goto(wav_part8)

wav_part8:
   fadeout(X_FADE)
   lmap(MAP_WAV_P8, D,E)
   zone(ZONE_WAV)
   cstep(wav_part8a, $06,$0e)
   ctres($6f,IT_HPLo,$05,$07,$31,SFX_CHEST)
   ctres($70,IT_HPLo,$07,$07,$31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part8a:
   set(D,$10)
   set(E,$03)
   goto(wav_part7)

wav_hitlo:
   get(A,VAR_WAVWATER1)
   if(A,CE,1,RET)
   get(A,VAR_WAVWATER2)
   if(A,CE,1,RET)
   hitstate(1)
   put(1,VAR_WAVHIT)
   end
wav_hithi:
   get(A,VAR_WAVWATER1)
   if(A,CE,1,RET)
   get(A,VAR_WAVWATER2)
   if(A,CE,1,RET)
   hitstate(2)
   put(0,VAR_WAVHIT)
   end

wav_switch1:
    get(A,VAR_WAVWATER1)
    set(B,0)
    cif(A,CE,0,wav_setB1)
    put(B,VAR_WAVWATER1)
    goto(wav_switch)
wav_switch2:
    get(A,VAR_WAVWATER2)
    set(B,0)
    cif(A,CE,0,wav_setB1)
    put(B,VAR_WAVWATER2)
    goto(wav_switch)
wav_setB1:
    set(B,1)
    end

wav_switch:
    call(wav_showA)
    call(wav_check)
    call(wav_showB)
    end

wav_showA:
   pan($10,$03)
   sleep(72)
   end
wav_showB:
   call(wav_shake)
   sleep(16)
   lockon(0)
   sleep(24)
   end
wav_shake:
   sfx(SFX_ENGULF)
   quake
   sleep(16)
   quake
   end

wav_check:
   set(A,0)
   set(B,0)

   get(F,VAR_WAVWATER1)
   set(C,1)
   cif(F,CE,1,wav_ldBC)

   get(F,VAR_WAVWATER2)
   set(C,2)
   cif(F,CE,1,wav_ldBC)

   set(C,3)
   cif(A,CE,2,wav_ldBC)

   mapstate(B)
   if(B,CL,3,RET)
   inc(B)
   hitstate(B)
   end
wav_ldBC
   set(B,C)
   inc(A)
   end
